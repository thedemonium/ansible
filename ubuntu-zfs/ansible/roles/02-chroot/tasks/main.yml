---
- debug:
    var: zfsprep_efi|default(false)|bool == true
- name: install locales
  locale_gen:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ zfsprep_locales }}"
- name: set LANG in /etc/default/locale
  lineinfile:
    line: "LANG={{ zfsprep_lang }}"
    path: /etc/default/locale
    insertafter: EOF
- name: set timezone
  shell: "echo {{ zfsprep_timezone }} > /etc/timezone && rm /etc/localtime && dpkg-reconfigure -f noninteractive tzdata"
- name: ln -s /proc/self/mounts /etc/mtab
  file:
    src: /proc/self/mounts
    dest: /etc/mtab
    state: link
- name: update apt cache
  apt:
    update_cache: yes
- name: install our kernel
  apt:
    name: "{{ zfsprep_kernel_package }}"
    install_recommends: no
    state: present
- name: install zfs-initramfs
  apt:
    name: zfs-initramfs
    state: present
- name: install grub-pc
  apt:
    name: grub-pc
    state: present
  when: zfsprep_efi|default(false)|bool != true
- apt:
    name: dosfstools
    state: present
  when: zfsprep_efi|default(false)|bool == true
- name: set up grub partitions for efi
  shell: "mkdosfs -F32 -n EFI {{ item }}"
  with_items:
    - "{{ zfsprep_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_boot_part_append) | list  }}"
  when: zfsprep_efi|default(false)|bool == true
- name: create efi mountpoint
  file:
    path: /boot/efi
    state: directory
  when: zfsprep_efi|default(false)|bool == true
- name: update fstab with efi
  shell: "echo PARTUUID=$(blkid -s PARTUUID -o value {{ zfsprep_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_boot_part_append) | list | first }})  /boot/efi vfat nofail,x-systemd.device-timeout=1 0 1 > /etc/fstab && mount /boot/efi"
  when: zfsprep_efi|default(false)|bool == true
- name: update fstab with backup efi partitions
  shell: "echo \\# PARTUUID=$(blkid -s PARTUUID -o value {{ item }})  /boot/efi vfat nofail,x-systemd.device-timeout=1 0 1 >> /etc/fstab"
  when: zfsprep_efi|default(false)|bool == true
  with_items:
    - "{{ (zfsprep_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_boot_part_append) | list)[1:] }}"
- name: update fstab with LUKS /boot volume
  shell: "echo UUID=$(blkid -s UUID -o value {{ item }}) /boot ext2 defaults 0 2 >> /etc/fstab"
  with_items:
    - "{{ (zfsprep_root_device_list | length > 1) | ternary('/dev/md0', (zfsprep_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_crypt_part_append) | list).0) }}"
  when: zfsprep_luks|default(false)|bool == true
- name: install cryptsetup
  apt:
    name: cryptsetup
    state: latest
  when: zfsprep_luks|default(false)|bool == true
- name: update crypttab
  shell: "echo {{ item.0 }} UUID=$(blkid -s UUID -o value {{ item.1 }}) none luks,discard,initramfs >> /etc/crypttab"
  with_together:
    - "{{ zfsprep_luks_root_names + zfsprep_luks_data_names }}"
    - "{{ (zfsprep_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_root_part_append) | list) + (zfsprep_data_partitions | ternary((zfsprep_data_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_data_part_append) | list),zfsprep_data_device_list)) }}"
  when: zfsprep_luks|default(false)|bool == true
- name: install grub-efi-amd64
  apt:
    name: grub-efi-amd64
    state: present
  when: zfsprep_efi|default(false)|bool == true
- name: set root password
  user:
    name: root
    password: "{{ zfsprep_root_password_hash }}"
- name: fix mount race condition
  shell: "zfs set mountpoint=legacy {{ item }}"
  with_items:
    - "{{ zfsprep_root_pool }}/var/log"
    - "{{ zfsprep_root_pool }}/var/tmp"
- name: update fstab
  lineinfile:
    line: "{{ zfsprep_root_pool}}{{ item }} {{ item }} zfs defaults 0 0"
    path: /etc/fstab
    insertafter: EOF
  with_items:
    - /var/log
    - /var/tmp
- name: install mdadm in chroot
  apt:
    name: mdadm
    state: latest
  when: zfsprep_luks|default(false)|bool == true
- name: create swap zvol
  zfs:
    name: "{{ zfsprep_root_pool }}/swap "
    state: present
    extra_zfs_properties:
      "{{ zfsprep_swap_opts }}"
- name: mkswap
  shell: "mkswap -f /dev/zvol/{{ zfsprep_root_pool }}/swap && echo /dev/zvol/{{ zfsprep_root_pool }}/swap none swap defaults 0 0 >> /etc/fstab && swapon -av"
  when: zfsprep_swap|default(false)|bool == true
- lineinfile:
    line: "RESUME=none"
    path: /etc/initramfs-tools/conf.d/resume
    create: yes
    state: present
  when: zfsprep_swap|default(false)|bool == true
- shell: "update-initramfs -c -k all"
- name: modify /etc/default/grub
  replace:
    path: /etc/default/grub
    regexp: "{{ item.regex }}"
    replace: "{{ item.replace }}"
  with_items:
    - regex: "^(GRUB_HIDDEN_TIMEOUT.*)"
      replace: "#\\1"
    - regex: "^GRUB_CMDLINE_LINUX_DEFAULT=.*"
      replace: 'GRUB_CMDLINE_LINUX_DEFAULT=""'
    - regex: "^GRUB_CMDLINE_LINUX=.*"
      replace: 'GRUB_CMDLINE_LINUX="{{ zfsprep_grub_cmdline }}"'
    - regex: "^#(GRUB_TERMINAL.*)"
      replace: "\\1"
- shell: update-grub
- shell: "grub-install {{ item }}"
  with_items:
    - "{{ zfsprep_root_device_list }}"
  when: zfsprep_efi|default(false)|bool != true
- name: install grub efi on primary disk
  shell: "grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ubuntu --recheck --no-floppy"
  when: zfsprep_efi|default(false)|bool == true
- name: write grub boot sector/setup efi on secondary disks
  shell: "dd if={{ zfsprep_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_boot_part_append) | list | first }} of={{ item.0 }} && efibootmgr -c -g -d {{ item.1 }} -p 3 -L 'ubuntu-{{ item.2 }}' -l '\\EFI\\Ubuntu\\grubx64.efi'"
  with_together:
    - "{{ (zfsprep_root_device_list | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_boot_part_append) | list)[1:] }}"
    - "{{ (zfsprep_root_device_list | map('regex_replace', '(.*)', '\\g<1>') | list)[1:] }}"
    - "{{ zfsprep_root_disks[1:] }}"
  when: (zfsprep_efi|default(false)|bool == true) and (zfsprep_root_device_list | length > 1)
- name: ensure zfs.target starts on boot
  systemd:
    name: zfs.target
    enabled: yes
- name: install firstboot service
  template:
    src: firstboot.service.j2
    dest: /lib/systemd/system/firstboot.service
- name: install firstboot script
  template:
    src: firstboot.j2
    dest: /opt/firstboot
    mode: 0777
- name: enable firstboot service
  systemd:
    name: firstboot.service
    enabled: yes
- name: enable systemd-networkd service
  systemd:
    name: systemd-networkd
    enabled: yes
